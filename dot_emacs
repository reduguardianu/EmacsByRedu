;; -*- emacs-lisp -*-
(server-mode t)
;; set look&feel
(setq default-frame-alist '((font . "-*-Monaco-normal-r-*-*-17-102-120-120-c-*-iso8859-1")))

;; set major mode according to filename
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.show\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.as\\'" . actionscript-mode))

;; (add-to-list
;;    'load-path
;;        (car (file-expand-wildcards "/opt/erlang/lib/erlang/lib/tools-*/emacs")))

;; (setq erlang-root-dir "/opt/erlang/")
;; (setq exec-path (cons "/opt/erlang" exec-path))
;; (require 'erlang-start)
(setenv "PATH" (concat "/Users/marek/bin/:" (getenv "PATH")))
(setq exec-path (append exec-path '("/Users/marek/bin/")))

;; check os
(setq mac (equal system-type 'darwin))
(setq my-emacs-dir "~/.emacs_settings/")
(add-to-list 'load-path (concat my-emacs-dir "mo-git-blame"))
(add-to-list 'load-path my-emacs-dir)
(load-file (concat my-emacs-dir "show_tracker_helper.el"))
(load-file (concat my-emacs-dir "php-mode/php-mode.el"))

(autoload 'mo-git-blame-file "mo-git-blame" nil t)
(autoload 'mo-git-blame-current "mo-git-blame" nil t)

(add-hook 'actionscript-mode-hook 'subword-mode)

(add-to-list 'compilation-error-regexp-alist '("\\(.*\\):\\([0-9]+\\).*Error.*" 1 2))
(add-to-list 'compilation-error-regexp-alist '("\\(.*\\):\\([0-9]+\\).*Syntax error.*" 1 2))
(add-to-list 'compilation-error-regexp-alist '("\\(.*\\):\\([0-9]+\\).*Warning.*" 1 2))

(add-hook 'before-save-hook (lambda()
                              (delete-trailing-whitespace)
                              (set-buffer-file-coding-system 'utf-8-dos t)
                              (set-buffer-file-coding-system 'utf-8-unix t)
                              (save-excursion
                                (goto-char (point-min))
                                (replace-string "" "")
                                (goto-char (point-max))
                                (if (not (equal (thing-at-point 'whitespace) "\n"))
                                    (insert "\n")
                                  )
                                )
                              )
          )

;; set indentation
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; higlight current line
;; http://emacs-fu.blogspot.com/2008/12/highlighting-current-line.html
(defface hl-line '((t (:background "#404040")))
  "Face to use for `hl-line-face'." :group 'hl-line)
(setq hl-line-face 'hl-line)
(global-hl-line-mode t) ; turn it on for all modes by default

;; mark tabs, trailing whitespaces and too long lines
(require 'whitespace)
(setq whitespace-style '(tabs
;;                         lines-tail
                         trailing))
(global-whitespace-mode t)

(show-ws-toggle-show-trailing-whitespace)

(global-set-key (kbd "C-x t") 'toggle-truncate-lines)

(show-paren-mode t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(transient-mark-mode t)
(font-lock-mode t)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)
(setq echo-keystrokes 0.1)
(global-font-lock-mode 1)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq confirm-kill-emacs 'yes-or-no-p)

(global-set-key (kbd "M-RET") 'ff-find-related-file)

(ido-mode t)
(setq ido-enable-flex-matching t) ;; fuzzy matching

(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-selection-value)

(global-set-key (kbd "M-n") 'next-error)
(global-set-key (kbd "M-p") 'previous-error)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'erase-buffer 'disabled nil)

(global-set-key (kbd "C-x g") #'magit-status)



;;==================================================
;; STRZAŁKI
;;==================================================
; Domyślnie:
;  lewo  - poprzednie okno
;  prawo - następne okno
;  góra  - jedna linia w górę (scroll)
;  dół  - jedna linia w dół (scroll)
;
; (toggle-arrow-keys) aby zmienić strzałki na poruszanie się po oknie
;   (lewo, prawo, góra dół). Ponowne wywołanie przywraca domyślne
;   ustawienie
;
(defun scroll-down-one-line () (interactive) (scroll-down 1))
(defun scroll-up-one-line () (interactive) (scroll-up 1))

(defvar toggled-arrow-keys t)
(defun toggle-arrow-keys ()
  (interactive)
  (if toggled-arrow-keys
      (progn
	(global-set-key (kbd "<up>") 'scroll-down-one-line)
	(global-set-key (kbd "<down>") 'scroll-up-one-line)

	(global-set-key (kbd "<left>") (lambda (&optional n)
					 (interactive "p")
					 (if n
					     (other-window (- n))
					   (other-window -1))))3

	(global-set-key (kbd "<right>") (lambda (&optional n)
					  (interactive "p")
					  (if n
					      (other-window n)
					    (other-window 1))))
	(setq toggled-arrow-keys nil))
    (progn
      (global-set-key (kbd "<left>") 'backward-char)
      (global-set-key (kbd "<right>") 'forward-char)
      (global-set-key (kbd "<up>") 'previous-line)
      (global-set-key (kbd "<down>")'next-line)
      (setq toggled-arrow-keys t))))
(toggle-arrow-keys)


(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(defun sh ()
  (interactive)
  (split-window-vertically)
  (other-window 1)
  (eshell))

(defalias 'psh 'python-shell)

;; set limit to 50 chars without warning when creating git commit msg
(font-lock-add-keywords 'magit-log-edit-mode
                        '(("\\`[^\n]\\{50\\}\\(.*\\)" 1 font-lock-warning-face)))
(add-hook 'magit-log-edit-mode-hook 'font-lock-fontify-buffer)

;; Move current line up and down
(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)

;; flymake
(defun my-flymake-show-next-error()
  (interactive)
  (flymake-goto-next-error)
  (flymake-display-err-menu-for-current-line)
  )
(global-set-key "\C-c\C-v" 'my-flymake-show-next-error)
(global-set-key "\C-ch" 'highlight-regexp)
(global-set-key "\C-cu" 'unhighlight-regexp)

(add-to-list 'custom-theme-load-path "~/.emacs_settings/themes")
(require 'color-theme)
(color-theme-initialize)
(load-theme 'ample t)


(defun as3-outline()
  (interactive)
  (shell-command (concat "as3-outline " (buffer-file-name)) "*Outline*")
  (other-window 1)
  (grep-mode))


(defun run-game(game)
  (interactive)
  (if (get-buffer "*Async Shell Command*")
      (kill-buffer "*Async Shell Command*")
    )
  (async-shell-command game)
)
(global-set-key "\C-ct" 'as-trace)
(global-set-key "\C-cv" (lambda()
                          (interactive)
                          (shell-command "tail -f /tmp/flashlogs&" "*AS3 trace*")
                          )
                )
(global-set-key "\C-cr" (lambda() (interactive) (run-game "run_tribal")))
;;Compile action script
(global-set-key "\C-ca" (lambda() (interactive) (compile "compile-tribal")))
(global-set-key "\C-cj" (lambda() (interactive) (compile "cd ~/Projects/kleszcze_z_klanu/tribes-server&&mvn compile")))
(global-set-key "\C-cl" (lambda() (interactive) (async-shell-command "tail -f ~/.macromedia/Flash_Player/Logs/flashlog.txt") (rename-buffer "*AS3 Logs*")))
(global-set-key "\C-ce" (lambda() (interactive) (async-shell-command (concat eclipse-path "eclipse -vmargs -Xms256m -Xmx1024m -XgcPrio:deterministic") "*Eclipse*")))

;;
;; ace jump mode major function
;;
(add-to-list 'load-path (concat my-emacs-dir "ace-jump-mode/"))
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(defun go-to-as3-error ()
  (interactive)
  (setq line-num 0)
  (setq file-name nil)
  (save-excursion
    (beginning-of-line)
    (search-forward-regexp "\\[.*:")
    (if (looking-at "[0-9]+")
        (setq line-num (string-to-number (buffer-substring (match-beginning 0) (match-end 0))))
      )
    (search-backward "[")
    (forward-char)
    (setq file-name (ffap-guesser))
    )
  (find-file file-name)
  (if (not (equal line-num 0))
      (goto-line line-num))
)
(global-set-key "\C-cg" 'go-to-as3-error)

(defun upward-find-file (filename &optional startdir)
  "Move up directories until we find a certain filename. If we
  manage to find it, return the containing directory. Else if we
  get to the toplevel directory and still can't find it, return
  nil. Start at startdir or . if startdir not given"

  (let ((dirname (expand-file-name
		  (if startdir startdir ".")))
	(found nil) ; found is set as a flag to leave loop if we find it
	(top nil))  ; top is set when we get
		    ; to / so that we only check it once

    ; While we've neither been at the top last time nor have we found
    ; the file.
    (while (not (or found top))
      ; If we're at / set top flag.
      (if (string= (expand-file-name dirname) "/")
	  (setq top t))

      ; Check for the file
      (if (file-exists-p (expand-file-name filename dirname))
	  (setq found t)
	; If not, move up a directory
	(setq dirname (expand-file-name ".." dirname))))
    ; return statement
    (if found dirname nil)))
(global-wakatime-mode)

(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)

(global-set-key (kbd "s-SPC") 'omnisharp-auto-complete)
;; (global-set-key (kbd "s-SPC") 'auto-complete)

;; (require 'eclim)
;; (global-eclim-mode)
;; ;; regular auto-complete initialization
;; (require 'auto-complete-config)
;; (ac-config-default)
;; (require 'ac-emacs-eclim-source)
;; (ac-emacs-eclim-config)
;; (setq eclim-executable "/opt/eclipse/eclim")
(fset 'fix_unity_setup
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 6 99 115 112 return 134217848 114 101 112 108 97 99 101 115 45 backspace backspace 45 115 116 114 105 110 103 return 90 76 backspace 58 return return 24 19 24 6 99 115 112 116 111 106 return 134217848 up return return 24 19 24 6 99 115 112 114 111 106 return 134217848 up return return 24 19 24 6 99 115 112 114 111 106 return 134217848 up return return 24 19 24 107 return 24 107 return 24 107 return 24 107 return] 0 "%d")) arg)))
